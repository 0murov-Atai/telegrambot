from db import PostgreSQL
from aiogram import types
from aiogram import executor
from buttons import InlineButtons, Buttons
from config import dispatcher, bot, resize_image
from aiogram.types import Message, CallbackQuery

btns = Buttons()
ibtns = InlineButtons()

@dispatcher.message_handler(commands=['start'])
async def welcome(message: Message):
    welcome_sticker=open('/home/zhoomart/Pictures/welcome.gif', 'rb')
    await bot.send_animation(
        chat_id=message.from_user.id,
        animation=welcome_sticker
    )

    return await bot.send_message(
        chat_id=message.from_user.id,
        text=f'''
        *–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}*
        –∫–æ–º–ø–∞–Ω–∏—è Resto —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ!
        ''',
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup = btns.main_buttons()
    )

@dispatcher.message_handler(content_types=["text"])
async def main_response(message: Message):
    if message.text == '–∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –µ–¥—É –Ω–∞ –≤—ã–Ω–æ—Å üçï':
       return await bot.send_message(
           chat_id = message.from_user.id,
           text = '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é –∑–∞–∫–∞–∑–∞...'
       )
    elif message.text == '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ ‚è∞':
        return await bot.send_message(
            chat_id = message.from_user.id,
            text = '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –±—Ä–æ–Ω—å...'
        )
    elif message.text == '—É–∑–Ω–∞—Ç—å –º–µ–Ω—é':
        return await bot.send_message(
           chat_id = message.from_user.id,
           text = 'Resto –ú–µ–Ω—é:',
           reply_markup = ibtns.show_menu_buttons()
       )
    elif message.text == '–û—Ç–∑—ã–≤—ã':
        return await bot.send_message(
           chat_id = message.from_user.id,
           text='*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤*',
           parse_mode=types.ParseMode.MARKDOWN,
           reply_markup=ibtns.feedbacks_buttons()
       )


@dispatcher.callback_query_handler()
async def show_menu(callback: CallbackQuery):
    psql = PostgreSQL()

    if callback.data == 'breakfast':
        for breakfast_object in psql.select(
                ('name', 'meal_type', 'image_path', 'price'), 
                'meal', 
                {"meal_type": 2}
            ):
            resized_image = resize_image(breakfast_object[2])

            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(resized_image, 'rb'),
                caption=f'_**Resto –ó–∞–≤—Ç—Ä–∞–∫–∏:**_\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: *{breakfast_object[0]}*\n–¶–µ–Ω–∞: *{breakfast_object[3]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN
            )
        else:
            psql.connection.close()

    elif callback.data == 'send_feedback':
        return await bot.send_message(
            chat_id=callback.from_user.id,
            text='*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:*',
            parse_mode=types.ParseMode.MARKDOWN
        )

@dispatcher.message_handler(content_types=["text"])
async def save_feedback(message: Message):
    print(message.text)
    await bot.send_message(
        chat_id=message.from_user.id,
        text="–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!"
    )


if __name__ == '__main__':
    executor.start_polling(dispatcher=dispatcher)